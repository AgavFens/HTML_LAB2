import { FC } from 'react';

declare type Subscription = {
    event: 'challenge-visible';
} | {
    event: 'challenge-hidden';
} | {
    event: 'network-error';
} | {
    event: 'token-expired';
} | {
    event: 'javascript-error';
    data: JavascriptErrorData;
} | {
    event: 'success';
    data: string;
};
declare type SubscribeEvent = Subscription['event'];
declare type WidgetId = number;
declare type Token = string;
declare type Unsubscribe = () => void;
declare type RenderParams = {
    sitekey: string;
    callback?: (token: string) => void;
    hl?: 'ru' | 'en' | 'be' | 'kk' | 'tt' | 'uk' | 'uz' | 'tr';
    invisible?: boolean;
    test?: boolean;
    webview?: boolean;
};
declare type JavascriptErrorData = {
    filename: string;
    message: string;
    col: number;
    line: number;
};
declare type SmartCaptchaApi = {
    render: (container: HTMLElement | string, params: RenderParams) => WidgetId;
    reset: (widgetId?: WidgetId) => void;
    destroy: (widgetId?: WidgetId) => void;
    execute: (widgetId?: WidgetId) => void;
    showError: (widgetId?: WidgetId) => void;
    subscribe: (widgetId: WidgetId, event: SubscribeEvent, fn: (...args: unknown[]) => void) => Unsubscribe;
    getResponse: (widgetId?: WidgetId) => string | undefined;
    _origin: string;
    _test: string;
    _webview: string;
};
declare type SubscribeMethods = {
    onChallengeVisible?: () => void;
    onChallengeHidden?: () => void;
    onNetworkError?: () => void;
    onTokenExpired?: () => void;
    onJavascriptError?: (error: JavascriptErrorData) => void;
    onSuccess?: (token: Token) => void;
};
declare type SmartCaptchaPropsBase = Omit<RenderParams, 'invisible' | 'callback' | 'hl'> & SubscribeMethods & {
    language?: RenderParams['hl'];
    host?: string;
};

declare type SmartCaptchaProps = SmartCaptchaPropsBase;
declare const SmartCaptcha: FC<SmartCaptchaProps>;

declare type InvisibleSmartCaptchaProps = SmartCaptchaPropsBase & {
    shieldPosition?: 'top-left' | 'center-left' | 'bottom-left' | 'top-right' | 'center-right' | 'bottom-right';
    hideShield?: boolean;
    visible?: boolean;
};
declare const InvisibleSmartCaptcha: FC<InvisibleSmartCaptchaProps>;

declare function useSmartCaptchaLoader(host?: string, onJavascriptError?: SubscribeMethods['onJavascriptError']): SmartCaptchaApi | undefined;

export { InvisibleSmartCaptcha, InvisibleSmartCaptchaProps, SmartCaptcha, SmartCaptchaProps, useSmartCaptchaLoader };
